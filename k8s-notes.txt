01/03/2023   Kubernetes (K8S)

1. List all worker nodes (Node group nodes) --> kubectl get nodes 
2. List all pods running in the namespace --> kubectl get pods/po/pod (It will list all the pods in default namespace)
3. List pods in LOGGING namespace --> kubectl get pods -n logging or kubectl get pods --namespace logging
4. List namespaces --> kubectl get namespaces/ns/namespace 
5. Why namespace is needed in K8S? In Kubernetes, namespaces provides a mechanism for isolating groups of 
resources within a single cluster.
6. Deployment in K8S --> Behind scene creates Replica Set. In case pod goes down Deployment makes sure 
another pod is created. 
7. Scaling up and down in K8S --> 
    7.1  kubectl scale --replicas 5 deployment frontend
    7.2 List deployments --> kubectl get deployments/deploy/deployment
    7.3 Possible to Scale pods from manifest yaml file as well. 


Statefull app in K8S

1. Statefull means Persistent volume is created and in case pod goes down data will be persisted/kept 
2. Get Storageclass --> kubectl get sc/storageclass/storageclasses 
3. kubectl create secret generic mysql-pass --from-literal=password=eks-orchsky-mysql-pw --namespace statefull
4. kubectl get secret --namespace statefull
5. kubectl patch storageclass orchsky -p  '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}' -n statefull


1/10/2023  Tuesday 

Configure CSI (Container Storage Interface)

1. kubectl get all -l app.kubernetes.io/name=aws-ebs-csi-driver -n kube-system

2. Managing the Amazon EBS CSI driver as an Amazon EKS add-on
    2.1 aws eks describe-addon-versions --addon-name aws-ebs-csi-driver
    2.2 eksctl create addon --name aws-ebs-csi-driver --cluster <Your cluster name> --service-account-role-arn arn:aws:iam::111122223333:role/AmazonEKS_EBS_CSI_DriverRole --force
    2.3 eksctl get addon --name aws-ebs-csi-driver --cluster <Your cluster name> 

3. Creating the Amazon EBS CSI driver IAM role for service accounts
    eksctl create iamserviceaccount \
    --name ebs-csi-controller-sa \
    --namespace kube-system \
    --cluster Orchsky-cluster \
    --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
    --approve \
    --role-only \
    --role-name AmazonEKS_EBS_CSI_DriverRole

4. Create namespace stateful app 
    4.1 kubectl create ns/namespace <your namespace name>
    4.2 kubectl apply -f file-name.yaml -n/--namespace <your namespace name>


5. How do make sure you restrict access to certain namespace?
    5.1 Create an IAM user in AWS and dont attach a policy 
    5.2 kubectl -n kube-system get configmap
    5.3 kubectl -n kube-system get configmap aws-auth -o yaml > aws-auth-configmap.yaml
    5.4 kubectl apply -f aws-auth-configmap.yaml -n kube-system
    5.5 kubectl -n kube-system describe configmap aws-auth


    eksctl create addon --name aws-ebs-csi-driver --cluster Orchsky-cluster --service-account-role-arn arn:aws:iam::062315287263:role/AmazonEKS_EBS_CSI_DriverRole --force

    eksctl create iamserviceaccount \
  --name ebs-csi-controller-sa \
  --namespace kube-system \
  --cluster Orchsky-cluster \
  --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
  --approve \
  --role-only \
  --role-name AmazonEKS_EBS_CSI_DriverRole


  oidc_id=$(aws eks describe-cluster --name Orchsky-cluster --query "cluster.identity.oidc.issuer" --output text | cut -d '/' -f 5)


1/12/2023   Thursday (Kubernetes cont. )

1. Limitation of Deployment --> During Stateful app deployment extra Persistent Volumes cannot be created. 
For example: lets say number of pods should be scaled from 1 to 2. In this case deployment cannot create 
second pv ( Persistent Volume) for 2nd Pod. In order to solve this problem StatefulSet will be used. 
2. In order to overcome above limitation we can use StatefulSet from Kubernetes 
3. kubectl get statefulset/sts 